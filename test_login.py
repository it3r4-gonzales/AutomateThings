# Generated by Selenium IDE
import pytest
from pytest import skip
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from time import sleep
from selenium.webdriver.chrome.options import Options


class TestLogin():

  def setup_method(self, method):
    global driver 
    self.driver = driver = webdriver.Chrome(executable_path="C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe")
    driver.set_window_size(1552, 849)
    driver.get("http://188.166.243.173/signin/?login=yes")

  def teardown_method(self, method):
    driver.quit()

  @pytest.mark.skip(reason="not needed")
  def test_login_valid_email_and_password(self):
    driver.find_element(By.ID, "email").send_keys("Sample7@ypo.com")
    driver.implicitly_wait(5) 
    driver.find_element(By.ID, "password").send_keys("User@123")
    driver.find_element(By.ID, "password").send_keys(Keys.ENTER)
    driver.find_element(By.CSS_SELECTOR, ".gray-bg").click()
    sleep(5)
    success = driver.find_element_by_xpath("//*[@id='toast-container']/div/div[2]/div").text
    expected_text = 'Logging in..'
    assert success == expected_text
    driver.close()

  # @pytest.mark.skip(reason="no way of currently testing this")
  def test_login_invalid_email_and_password(self):
    driver.find_element(By.ID, "email").send_keys("wrongsampl@ypo.com")
    driver.implicitly_wait(5) 
    driver.find_element(By.ID, "password").send_keys("User@123")
    driver.find_element(By.ID, "password").send_keys(Keys.ENTER)
    driver.find_element(By.CSS_SELECTOR, ".gray-bg").click()
    sleep(5)
    success = driver.find_element_by_xpath("//*[@id='toast-container']/div/div[2]/div").text
    expected_text = 'Invalid user or password'
    assert success == expected_text
    driver.close()

  # @pytest.mark.skip(reason="not needed")
  def test_new_user_login(self):
    driver.find_element(By.ID, "email").send_keys("lazr@ypo.com")
    driver.implicitly_wait(5) 
    driver.find_element(By.ID, "password").click()
    driver.find_element(By.ID, "password").send_keys("499382")
    driver.find_element(By.CSS_SELECTOR, "strong").click()
    sleep(10)
    driver.find_element(By.ID, "change_pass_pwd1").click()
    driver.find_element(By.ID, "change_pass_pwd1").send_keys("User@123")
    driver.find_element(By.ID, "change_pass_pwd2").click()
    driver.find_element(By.ID, "change_pass_pwd2").send_keys("User@123")
    sleep(5)
    driver.find_element(By.CSS_SELECTOR, ".modal-footer > .btn-primary").click()
    sleep(5)
    # success = driver.find_element_by_xpath("//*[@id='toast-container']/div/div[2]/div").text
    # expected_text = 'Password successfully changed. Please login again using your new password.'
    # assert success == expected_text
    # driver.close()
  
  @pytest.mark.skip(reason="no way of currently testing this")
  def test_forgot_password(self):
    sleep(3)
    driver.find_element(By.ID, "forgot_password").click()
    sleep(3)
    driver.find_element(By.CSS_SELECTOR, ".row:nth-child(5) > .col-lg-12").click()
    sleep(3)
    driver.find_element(By.CSS_SELECTOR, ".form-control:nth-child(1)").click()
    sleep(10)
    driver.find_element(By.CSS_SELECTOR, ".ng-not-empty").send_keys("gonzalesjohnromil57@gmail.com")
    sleep(5)
    driver.find_element(By.CSS_SELECTOR, ".block").click()

  @pytest.mark.skip(reason="no way of currently testing this")
  def test_reaching_login_limit(self):
    pass

  @pytest.mark.skip(reason="no way of currently testing this")  
  def valid_credentials_but_account_locked(self):
    pass

